Suppose you are building a website for a company that sells various products. The website will have a shopping cart feature that allows users to add products to their cart, remove products from their cart, and view the total price of the items in their cart.

To implement this feature, we can use several design patterns, such as the Observer pattern to update the cart contents when items are added or removed, and the Strategy pattern to allow for different types of pricing strategies.

Observer Pattern:

In the Observer pattern, there are two main components: the observer and the observable. 
In this case, the shopping cart is the observable, and any changes to its contents (i.e., adding or removing items) will notify the observers (i.e., the view layer of the website) so that they can update the display of the cart contents.

Singleton Pattern:

In the Singleton pattern, the class has a private constructor to prevent other objects from creating new instances of the class. 
Instead, the class provides a static method to access the single instance of the class. 
The first time the static method is called, the class creates a new instance of itself and stores it in a private static field. Subsequent calls to the static method return the existing instance.

Factory pattern:

The Factory Pattern is a creational pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created. 
This pattern is often used when we have multiple classes that implement a common interface or superclass, and we want to create objects of those classes without exposing the creation logic to the client.

Decorator Pattern:

Suppose you have a simple coffee shop application that offers different types of coffee. 
The basic implementation might have a Coffee interface with just one method: getCost(), which returns the cost of the coffee. 
You might have different coffee classes like HouseBlend, Espresso, and DarkRoast, which implement this interface and return the cost of the respective coffee type.

Now suppose you want to add the ability to add condiments to your coffee, like milk, sugar, and caramel. 
You could create separate classes for each combination of coffee and condiment, but that would lead to a huge number of classes and make the code difficult to maintain.

Instead, you can use the Decorator pattern to dynamically add the new behavior to your existing coffee objects. 
You would create a CondimentDecorator class that also implements the Coffee interface and contains a reference to another Coffee object. 
Each subclass of CondimentDecorator would add a new behavior to the existing coffee object. For example, the Milk class might add the cost of milk to the existing coffee cost, while the Caramel class might add the cost of caramel